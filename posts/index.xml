<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Reona Shimada</title>
		<link>https://reona5.github.io/posts/</link>
		<description>Recent content in Posts on Reona Shimada</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>Copyright since 2020 Reona Shimada All Rights Reserved.</copyright>
		<lastBuildDate>Tue, 31 Mar 2020 23:54:54 +0900</lastBuildDate>
		<atom:link href="https://reona5.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>GitHub Pages × Hugoで技術ブログを始めた</title>
			<link>https://reona5.github.io/posts/2020/0331_github_page_hugo/</link>
			<pubDate>Tue, 31 Mar 2020 23:54:54 +0900</pubDate>
			
			<guid>https://reona5.github.io/posts/2020/0331_github_page_hugo/</guid>
			<description>Webに関わる開発をしている方であれば、ソースコードのホスティングにGitHubを利用している人は多いのではないでしょうか。 GitHubには</description>
			<content type="html"><![CDATA[<p>Webに関わる開発をしている方であれば、ソースコードのホスティングに<a href="https://github.co.jp">GitHub</a>を利用している人は多いのではないでしょうか。</p>
<p>GitHubには<a href="https://pages.github.com/">GitHub Pages</a>という機能があり、静的ページをホスティングすることができます。デフォルトでは<code>(GitHubのアカウント名).github.io</code> のリポジトリ名がURLとなりますが、カスタムドメインを使用することもできます。（個人的にgithub.ioは充分シンプルで良いと思うので、このまま使っています。）</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/2MsN8gpT6jY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>また、昨年末にはCI/CDの機能を実現する<a href="https://github.co.jp/features/actions">GitHub Actions</a>が正式版として公開され話題になりましたね。</p>
<blockquote>
<p>CI（Continuous Integration、継続的インテグレーション）はソフトウェアのビルドやテストを自動化して頻繁に実行することでソフトウェアの品質向上や開発効率化を目指す手法で、CD（Continuous Delivery、継続的デリバリー）はCIに加えてリリースやデプロイまでも自動化する手法。</p>
</blockquote>
<p>CI/CDツールとしては<a href="https://circleci.com/ja/">CircleCI</a>がよく使われている印象ですが、基本的にはGitなどのバージョン管理ツールと組み合わせて使われるため、GitHubだけで完結できるGitHub Actionsのシェアも今後大きくなることが予想されます。</p>
<p>これらのGitHubの機能を使うことで、以下のワークフローが実現できます。</p>
<ol>
<li>静的サイトジェネレータ（Jekyll,Hugo,etc&hellip;)でWebサイトを作成</li>
<li>リモートリポジトリ（今回はsourceブランチ）にプッシュ、GitHub Actionsがプッシュを検知し、ビルドを行う</li>
<li>無事ビルドが完了すると、masterブランチにデプロイ</li>
</ol>
<p>静的サイトジェネレータはに関して、JekyllはGitHub Pagesの公式サイトでも推奨されており、一度触ってみましたが、</p>
<ul>
<li>プラグインの豊富さ、好みのプラグインがあるか</li>
<li>情報の豊富さ、新しい情報が多いかどうか</li>
<li>ビルドにかかる時間</li>
</ul>
<p>等の理由でHugoを選択しました。
普段の開発でエディタはVimを使っているので、エディタ上で且つMarkdownで入力ができるのはとても使い勝手が良いです。</p>
<h2 id="github-actionsの設定">GitHub Actionsの設定</h2>
<p>最初にGitHub Actionsを設定していきます。
GitHubで今回使用するリポジトリを作成し、リポジトリメニューの中からActionsを選択します。
言語によっては既にあるワークフローを使うこともできるみたいですね。</p>
<p><img src="images/github_sc1.png" alt="githubsc1"></p>
<p>今回は右上にある <code>Set up a workflow yourself</code> を選択します。</p>
<p>すると左側にyamlファイルを記述するエディタが表示されます。Marketplaceには既に用意されているActionsがありますので、こちらを使ってもいいです。基本的に構文ミスはエディタが指摘してくれますが、その他の細かい部分は右側にあるDocumentationに従い設定を進めましょう。
今回はスター数の多かった<a href="https://github.com/marketplace/actions/hugo-setup">Hugo Setup</a>を使うことにしました。</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">name</span><span class="p">:</span><span class="w"> </span>github<span class="w"> </span>pages<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- source<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">build-deploy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">runs-on</span><span class="p">:</span><span class="w"> </span>ubuntu-latest<span class="w">
</span><span class="w">    </span><span class="k">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Checkout<span class="w"> </span>Source<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>actions/checkout@v2<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Clone<span class="w"> </span>submodule<span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>git<span class="w"> </span>submodule<span class="w"> </span>update<span class="w"> </span>--init<span class="w"> </span>--recursive<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Hugo<span class="w"> </span>Setup<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>peaceiris/actions-hugo@v2<span class="m">.4.8</span><span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">hugo-version</span><span class="p">:</span><span class="w"> </span>latest<span class="w">
</span><span class="w">          </span><span class="k">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Build<span class="w"> </span>Hugo<span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>hugo<span class="w"> </span>-v<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Deploy<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>peaceiris/actions-gh-pages@v3<span class="m">.5.6</span><span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">deploy_key</span><span class="p">:</span><span class="w"> </span>${{<span class="w"> </span>secrets.ACTIONS_DEPLOY_KEY<span class="w"> </span>}}<span class="w">
</span><span class="w">          </span><span class="k">publish_dir</span><span class="p">:</span><span class="w"> </span>./public<span class="w">
</span><span class="w">          </span><span class="k">publish_branch</span><span class="p">:</span><span class="w"> </span>master<span class="w">
</span></code></pre></div><p>手順は以下の通りです。</p>
<ul>
<li>ソースコードのチェックアウト</li>
<li>サブモジュールであるテーマをクローン</li>
<li>Hugoのセットアップ</li>
<li>Hugoのビルド</li>
<li>Hugoのデプロイ</li>
</ul>
<p><code>uses</code>ではリポジトリを指定しており、<code>run</code> では走らせるコマンドを指定しております。</p>
<p>設定が終わったら<code>Start Commit</code>を押下し、ブランチは既にプッシュするブランチとして指定している<code>source</code> を作成し、commitします。</p>
<p>設定ファイルに書いた <code>deploy_key</code> を発行し、リポジトリに登録する必要があります。
Deployの際に使っているリポジトリ（https://github.com/peaceiris/actions-gh-pages）のREADMEにわかりやすい手順が載っているので、こちらは割愛します。</p>
<h2 id="サイトの作成">サイトの作成</h2>
<p>サイトの作成にあたっては<a href="https://gohugo.io/getting-started/quick-start/">HugoのQuick Start</a>を参考にしました。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ brew install hugo
$ hugo new site mywebsite
$ <span class="nb">cd</span> mywebsite
$ git init
$ git switch -c <span class="nb">source</span>
</code></pre></div><p><a href="https://themes.gohugo.io/">サイトのテーマ</a>は<a href="https://github.com/Track3/hermit">hermit</a>を選択しました。
シンプルながら色合いもシックで落ち着いていて、非常に気に入っています。</p>
<p>手順通りにこのテーマのリポジトリを<a href="https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB">サブモジュール化</a>します。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ git submodule add https://github.com/Track3/hermit.git themes/hermit
</code></pre></div><p>その後、<code>config.toml</code> でWebサイトの設定をしていきます。
設定にあたっては、各テーマのリポジトリに含まれるものを参考にしました。
Google Analyticsを使ったアクセス解析などもこちらで設定できます。</p>
<h2 id="ページの作成">ページの作成</h2>
<p>以下のコマンドで新規のブログ記事を作成します。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ hugo new posts/first_post.md
</code></pre></div><p>テンプレートファイルである<code>archetypes/default.md</code> を元に <code>content/posts/first_post.md</code> が生成されます。</p>
<p>サーバーの立ち上げには以下のコマンドを入力します。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ hugo server -D
</code></pre></div><p><code>-D</code> オプションを付けることで、<code>draft: true</code> （本番環境では表示しない）設定のページの含めてビルドしてくれます。
<code>localhost:1313</code> でブラウザからページが確認できます。ホットリロードであるためファイル変更後に保存すると、自動的に変更を検知してビルド・リロードすることでブラウザ上に変更が反映されます。便利ですね…</p>
<p>最後に <code>hugo</code> コマンドでサイトを生成し、デプロイまで進めましょう。
変更をリモートリポジトリにプッシュすることでGitHub Actionsのジョブが走ります。以上で完了です。</p>
<h2 id="最後に">最後に</h2>
<p>はてなブログやQiitaのようなサービスと比べると、テーマ選定等も含めて初期設定に少し時間はかかりますが、ポートフォリオサイトとしても使えるのでオススメです。</p>
<p>GitHub Actionsを使えばデプロイも自動化できますし、やはりなによりもGitHub上で完結しているのはとても楽だと感じました。</p>
<p>全て無料で触ることができますので、是非お試しください。</p>
]]></content>
		</item>
		
	</channel>
</rss>
