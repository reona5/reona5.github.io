<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Reona Shimada</title>
		<link>https://reona5.github.io/posts/</link>
		<description>Recent content in Posts on Reona Shimada</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>Copyright since 2020 Reona Shimada All Rights Reserved.</copyright>
		<lastBuildDate>Mon, 18 May 2020 11:38:45 +0900</lastBuildDate>
		<atom:link href="https://reona5.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>静的サイトジェネレータで作成したブログを検索結果に表示する</title>
			<link>https://reona5.github.io/posts/2020/0518_google_seo/</link>
			<pubDate>Mon, 18 May 2020 11:38:45 +0900</pubDate>
			
			<guid>https://reona5.github.io/posts/2020/0518_google_seo/</guid>
			<description>このブログはHugoを使って作成したのですが、SEO関連の設定が中途半端だったので今回一通り設定しました。 設定したのは以下の2つです。 Google Analytics Google</description>
			<content type="html"><![CDATA[<p>このブログは<a href="https://reona5.github.io/posts/2020/0331_github_page_hugo/">Hugoを使って作成した</a>のですが、SEO関連の設定が中途半端だったので今回一通り設定しました。</p>
<p>設定したのは以下の2つです。</p>
<ul>
<li><a href="https://marketingplatform.google.com/about/analytics/">Google Analytics</a></li>
<li><a href="https://search.google.com/search-console/about">Google Search Console</a></li>
</ul>
<p>事前にGoogleのアカウントは作っておきましょう。</p>
<h2 id="google-analytics">Google Analytics</h2>
<p>アクセス解析ができます。Webサイト運営においてはもはや必須ツールですね。
導入は非常に簡単なので、サクッとやっちゃいましょう。</p>
<ol>
<li>
<p>Google Analyticsアカウントを作成する
アカウントを作成することで生成されるトラッキングIDを利用します。
※ Google Analytics管理画面 &gt; 管理 &gt; プロパティ設定 からも確認できます。</p>
</li>
<li>
<p>Hugoリポジトリの <code>config.toml</code> に1行追加する</p>
</li>
</ol>
<pre><code>googleAnalytics = &quot;トラッキングID&quot;
</code></pre><ol start="3">
<li>リモートリポジトリに反映、デプロイする</li>
</ol>
<p>これで設定完了です。トップページにアクセスして、Google Analyticsのリアルタイムアクティブユーザーに反映されていれば成功です。
<img src="/images/2020-05-18-12-06-11.png" alt=""></p>
<h2 id="google-search-console">Google Search Console</h2>
<p><img src="/images/2020-05-18-12-30-46.png" alt=""></p>
<ol start="5">
<li>サイトマップのURLを入力する
Hugoのプロジェクトであれば、public/sitemap.xmlが自動生成されるので、 <code>sitemap/xml</code> を入力すればOK</li>
</ol>
<p>以上です。設定後、Google Analyticsで <code>集客 &gt; Search Console &gt; 検索クエリ</code> から Google Search Consoleとの紐付けを行えば、より精密に分析ができるみたいなので、こちらも設定しておきましょう。</p>
<p>翌日には検索結果に反映され、分析結果も表示されるはずです。</p>
]]></content>
		</item>
		
		<item>
			<title>認可・認証の概要まとめ</title>
			<link>https://reona5.github.io/posts/2020/0424_oauth/</link>
			<pubDate>Fri, 24 Apr 2020 17:13:14 +0900</pubDate>
			
			<guid>https://reona5.github.io/posts/2020/0424_oauth/</guid>
			<description>RailsでSNS連携のAPIを実装する機会があり、認可・認証に関して勉強する機会があったので簡単に概要を書いていきます。 認可・認証の技術で</description>
			<content type="html"><![CDATA[<p>RailsでSNS連携のAPIを実装する機会があり、認可・認証に関して勉強する機会があったので簡単に概要を書いていきます。
認可・認証の技術ではOAuth・OpenID Connect等があります。これらについては以下の記事が図を用いて非常にわかりやすくまとめられています。</p>
<p><a href="https://qiita.com/TakahikoKawasaki/items/e37caf50776e00e733be">(Qiita) 一番分かりやすい OAuth の説明</a></p>
<p><a href="https://qiita.com/TakahikoKawasaki/items/498ca08bbfcc341691fe">(Qiita) 一番分かりやすい OpenID Connect の説明</a></p>
<p>業務ではTwitter・Facebook・Googleの連携機能をサーバーサイドAPIとして実装しました。具体的には、取得したユーザー情報を用いてアカウント登録・ログイン、またログインができるように連携をする機能を追加しました。</p>
<p>TwitterではOAuth 1.0, FacebookではOAuth 2.0, GoogleではOpenID Connectが使われています。（実現したい機能によっては異なる場合もあります。）</p>
<p>これらを分類すると、</p>
<table>
<thead>
<tr>
<th></th>
<th align="center">認可</th>
<th align="center">認証</th>
</tr>
</thead>
<tbody>
<tr>
<td>OAuth 1.0</td>
<td align="center">○</td>
<td align="center"></td>
</tr>
<tr>
<td>OAuth 2.0</td>
<td align="center">○</td>
<td align="center"></td>
</tr>
<tr>
<td>OpenID Connect</td>
<td align="center">○</td>
<td align="center">○</td>
</tr>
</tbody>
</table>
<p>となっております。</p>
<p><strong>認可</strong> とは、</p>
<ul>
<li>所有リソースに対するアクセス権を代理人に与えること</li>
<li>アクセス権を与えられた代理人によるリソースの操作を可能とする鍵を渡すようなイメージ</li>
</ul>
<p><strong>認証</strong> とは、</p>
<ul>
<li>本人であることの証明を得ること</li>
<li>IDカードなどの本人が特定できる証明書によるものなどがある</li>
<li>ポピュラーなものだとiPhoneの指紋認証やFaceIDによる顔認証システムなど</li>
</ul>
<p>SNSを利用したアカウント登録処理の一例としては以下のとおりです。</p>
<ol>
<li>ユーザーがSNSを用いたアカウント登録をクライアントアプリに要求する（e.g. [Twitterでアカウント登録]ボタン押下）</li>
<li>クライアントAPIがSNSの認可サーバーにアクセストークン(リソース操作を可能にする鍵)を要求する</li>
<li>ユーザーがSNSログインをすることで、認可サーバーがアクセストークンを発行（認可処理）</li>
<li>アクセストークンがクライアントAPIからサーバーサイドAPIに渡される</li>
<li>ユーザー情報取得のエンドポイントにアクセスし、取得した情報を元にアカウントを作成し永続化する</li>
<li>JWTが発行され、クライアントアプリに渡される</li>
</ol>
<p>JWTは <code>JSON Web Token</code> の略で、発行してクライアントに返すことでSession IDをサーバーで保管する必要がなくなります。
詳しく落とし込めていない部分もあるので、別途記事にまとめたいですね…
Twitter, Facebook, Googleで実装や再現方法に関してもバラバラだったので、それらに関しても個別でまとめていきたいと思います。</p>
<p>以上、認可・認証に関する簡単なまとめでした。
特にRailsに関しては、あまり仕組みを知らずともDeviceやOmniauth等のGemがよしなにSNS連携の機能を実現してくれるので、今回はそれらを使わずに機能を実装したことで非常に勉強になりました。
今回作ったAPIに対応するクライアントAPIもSwiftを使って自分で実装することになりそうなので、非常に楽しみです。</p>
]]></content>
		</item>
		
		<item>
			<title>[Rails] ActiveInteractionについて</title>
			<link>https://reona5.github.io/posts/2020/0405_rails_active_interaction_gem/</link>
			<pubDate>Sun, 05 Apr 2020 23:16:07 +0900</pubDate>
			
			<guid>https://reona5.github.io/posts/2020/0405_rails_active_interaction_gem/</guid>
			<description>最近業務でよく使うActiveInteractionというGemについて、利用する目的を落とし込みたく、このGemを使うことでどのようなメリ</description>
			<content type="html"><![CDATA[<p>最近業務でよく使う<a href="https://github.com/AaronLasseigne/active_interaction">ActiveInteraction</a>というGemについて、利用する目的を落とし込みたく、このGemを使うことでどのようなメリットがあるのかを深堀りしようと記事にすることにしました。</p>
<p>GitHubリポジトリにはこのように書いてあります。</p>
<blockquote>
<p>ActiveInteraction manages application-specific business logic. It&rsquo;s an implementation of the command pattern in Ruby.</p>
</blockquote>
<p>どうやら<a href="https://www.techscore.com/tech/DesignPattern/Command.html/">デザインパターンの一種であるcommandパターン</a>が使われているようです。</p>
<p>また、このCommandパターンについては、</p>
<blockquote>
<p>Commandパターンでは、ある特定の動作を実行するオブジェクトを構築します。「特定」という部分が重要です。Commandパターンのコマンドのインスタンスはどの社員の住所についても変更する方法を知っているわけではありません。代わりに、ある特定の社員を新しい住所に移す方法を知っています。</p>
</blockquote>
<blockquote>
<p>コマンドは何かを行う方法を知っているだけで、それを実行する対象の状態には関心がありません。</p>
</blockquote>
<p>参考：Rubyによるデザインパターン</p>
<p>この表現がわかりやすかったです。
特定のビジネスロジックをコマンドとして作成し、通常の実行メソッドと併せて元に戻す（アンドゥ）メソッドも用意することができます。ActiveRecordのマイグレーション機能はCommandパターンの実装の典型例です。</p>
<p>話が脱線しましたが、以上のCommandパターンをActiveInteractionクラスを継承することで実現できるようです。</p>
<p>ActiveInteractionを使うことで得られるメリットについて考えていきます。</p>
<h2 id="1-fat-controllerになることを未然に防ぐことができる">1. Fat Controllerになることを未然に防ぐことができる</h2>
<p>コントローラは複雑になりがちであり、コード量が段々と膨れ上がる傾向があります。</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create</span>
  <span class="n">service</span> <span class="o">=</span> <span class="no">CreateUserService</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">service</span><span class="o">.</span><span class="n">valid?</span>
    <span class="n">head</span> <span class="ss">:created</span>
  <span class="k">else</span>
    <span class="n">render</span> <span class="n">service</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:bad_request</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><p>ActiveInteractionは、コントローラとは別にビジネスロジックを記述しておく場所を提供してくれます。
ActiveInteractionクラスを継承したServiceクラスに特定のビジネスロジックを書いておけば、コントローラでは<code>run</code>メソッドで呼び出すだけで済むようになるので、簡潔になりますね。(リファレンスでは <code>app/interactions/</code> 配下に配置することを推奨しています)</p>
<h2 id="2-ロジックを分離できるためテストが書きやすくなる">2. ロジックを分離できるため、テストが書きやすくなる</h2>
<p>これは1つ目のメリットに繋がるものではありますが、ロジックに集中したテストが書けるのでテスト単位が小さくなるのでテストが書きやすくなります。
業務ではサービスクラスのテスト、コントローラのテストを分けておりますが、2つに分けることでテストも簡潔になりますし、どういったコードの動きを担保したいのかがよりわかりやすくなるので、コントローラと同様に保守性の高いテストコードを保つことができます。</p>
<h2 id="3-より安全なコードを保つことができる">3. より安全なコードを保つことができる</h2>
<p>ActiveInteractionは型安全性を提供しているので、型の不一致によるバグが起こりにくく安全なコードを保つことができます。また、使用頻度は高くありませんが、ActiveModelと同様の書き方でバリデーションを定義することもできます。</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Users</span><span class="o">::</span><span class="no">SignUpService</span> <span class="o">&lt;</span> <span class="no">ActiveInteraction</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">string</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="n">password</span>

  <span class="k">def</span> <span class="nf">execute</span>
    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span>
    <span class="k">unless</span> <span class="n">user</span>
      <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:message</span><span class="p">,</span> <span class="s2">&#34;値が不正です&#34;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><p>上記のコードでは、inputsで受け入れる3つのStringパラメータを定義しています。</p>
<p>個人的に型の恩恵が受けられるのは、バグを発生させにくいコードを書くことに繋がると思っているので非常に大きなメリットだと思っています。型の種類がなかなか豊富で柔軟にロジックが記述できそうなのもいいですね。</p>
<h2 id="最後に">最後に</h2>
<p>ActiveInteractionを使ってロジックを分離して書くことで、保守性や再利用性の高いコードが実現できそうですね。
<a href="https://github.com/AaronLasseigne/active_interaction">ActiveInteractionのREADME</a>は非常に充実しており、基本的な使い方から発展的な使い方まで書いてあるので、使い方に迷った際には迷わずREADMEを参照でよさそうです。</p>
]]></content>
		</item>
		
		<item>
			<title>GitHub Pages × Hugoで技術ブログを始めた</title>
			<link>https://reona5.github.io/posts/2020/0331_github_page_hugo/</link>
			<pubDate>Tue, 31 Mar 2020 23:54:54 +0900</pubDate>
			
			<guid>https://reona5.github.io/posts/2020/0331_github_page_hugo/</guid>
			<description>Webに関わる開発をしている方であれば、ソースコードのホスティングにGitHubを利用している人は多いのではないでしょうか。 GitHubには</description>
			<content type="html"><![CDATA[<p>Webに関わる開発をしている方であれば、ソースコードのホスティングに<a href="https://github.co.jp">GitHub</a>を利用している人は多いのではないでしょうか。</p>
<p>GitHubには<a href="https://pages.github.com/">GitHub Pages</a>という機能があり、静的ページをホスティングすることができます。デフォルトでは<code>(GitHubのアカウント名).github.io</code> のリポジトリ名がURLとなりますが、カスタムドメインを使用することもできます。（個人的にgithub.ioは充分シンプルで良いと思うので、このまま使っています。）</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/2MsN8gpT6jY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>また、昨年末にはCI/CDの機能を実現する<a href="https://github.co.jp/features/actions">GitHub Actions</a>が正式版として公開され話題になりましたね。</p>
<blockquote>
<p>CI（Continuous Integration、継続的インテグレーション）はソフトウェアのビルドやテストを自動化して頻繁に実行することでソフトウェアの品質向上や開発効率化を目指す手法で、CD（Continuous Delivery、継続的デリバリー）はCIに加えてリリースやデプロイまでも自動化する手法。</p>
</blockquote>
<p>CI/CDツールとしては<a href="https://circleci.com/ja/">CircleCI</a>がよく使われている印象ですが、基本的にはGitなどのバージョン管理ツールと組み合わせて使われるため、GitHubだけで完結できるGitHub Actionsのシェアも今後大きくなることが予想されます。</p>
<p>これらのGitHubの機能を使うことで、以下のワークフローが実現できます。</p>
<ol>
<li>静的サイトジェネレータ（Jekyll,Hugo,etc&hellip;)でWebサイトを作成</li>
<li>リモートリポジトリ（今回はsourceブランチ）にプッシュ、GitHub Actionsがプッシュを検知し、ビルドを行う</li>
<li>無事ビルドが完了すると、masterブランチにデプロイ</li>
</ol>
<p>静的サイトジェネレータはに関して、JekyllはGitHub Pagesの公式サイトでも推奨されており、一度触ってみましたが、</p>
<ul>
<li>プラグインの豊富さ、好みのプラグインがあるか</li>
<li>情報の豊富さ、新しい情報が多いかどうか</li>
<li>ビルドにかかる時間</li>
</ul>
<p>等の理由でHugoを選択しました。
普段の開発でエディタはVimを使っているので、エディタ上で且つMarkdownで入力ができるのはとても使い勝手が良いです。</p>
<h2 id="github-actionsの設定">GitHub Actionsの設定</h2>
<p>最初にGitHub Actionsを設定していきます。
GitHubで今回使用するリポジトリを作成し、リポジトリメニューの中からActionsを選択します。
言語によっては既にあるワークフローを使うこともできるみたいですね。</p>
<p><img src="https://raw.githubusercontent.com/reona5/reona5.github.io/source/images/github_sc1.png" alt="githubsc1"></p>
<p>今回は右上にある <code>Set up a workflow yourself</code> を選択します。</p>
<p>すると左側にyamlファイルを記述するエディタが表示されます。Marketplaceには既に用意されているActionsがありますので、こちらを使ってもいいです。基本的に構文ミスはエディタが指摘してくれますが、その他の細かい部分は右側にあるDocumentationに従い設定を進めましょう。
今回はスター数の多かった<a href="https://github.com/marketplace/actions/hugo-setup">Hugo Setup</a>を使うことにしました。</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">name</span><span class="p">:</span><span class="w"> </span>github<span class="w"> </span>pages<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- source<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">build-deploy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">runs-on</span><span class="p">:</span><span class="w"> </span>ubuntu-latest<span class="w">
</span><span class="w">    </span><span class="k">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Checkout<span class="w"> </span>Source<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>actions/checkout@v2<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Clone<span class="w"> </span>submodule<span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>git<span class="w"> </span>submodule<span class="w"> </span>update<span class="w"> </span>--init<span class="w"> </span>--recursive<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Hugo<span class="w"> </span>Setup<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>peaceiris/actions-hugo@v2<span class="m">.4.8</span><span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">hugo-version</span><span class="p">:</span><span class="w"> </span>latest<span class="w">
</span><span class="w">          </span><span class="k">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Build<span class="w"> </span>Hugo<span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>hugo<span class="w"> </span>-v<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Deploy<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>peaceiris/actions-gh-pages@v3<span class="m">.5.6</span><span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">deploy_key</span><span class="p">:</span><span class="w"> </span>${{<span class="w"> </span>secrets.ACTIONS_DEPLOY_KEY<span class="w"> </span>}}<span class="w">
</span><span class="w">          </span><span class="k">publish_dir</span><span class="p">:</span><span class="w"> </span>./public<span class="w">
</span><span class="w">          </span><span class="k">publish_branch</span><span class="p">:</span><span class="w"> </span>master<span class="w">
</span></code></pre></div><p>手順は以下の通りです。</p>
<ul>
<li>ソースコードのチェックアウト</li>
<li>サブモジュールであるテーマをクローン</li>
<li>Hugoのセットアップ</li>
<li>Hugoのビルド</li>
<li>Hugoのデプロイ</li>
</ul>
<p><code>uses</code>ではリポジトリを指定しており、<code>run</code> では走らせるコマンドを指定しております。</p>
<p>設定が終わったら<code>Start Commit</code>を押下し、ブランチは既にプッシュするブランチとして指定している<code>source</code> を作成し、commitします。</p>
<p>設定ファイルに書いた <code>deploy_key</code> を発行し、リポジトリに登録する必要があります。
Deployの際に使っているリポジトリ（https://github.com/peaceiris/actions-gh-pages）のREADMEにわかりやすい手順が載っているので、こちらは割愛します。</p>
<h2 id="サイトの作成">サイトの作成</h2>
<p>サイトの作成にあたっては<a href="https://gohugo.io/getting-started/quick-start/">HugoのQuick Start</a>を参考にしました。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ brew install hugo
$ hugo new site mywebsite
$ <span class="nb">cd</span> mywebsite
$ git init
$ git switch -c <span class="nb">source</span>
</code></pre></div><p><a href="https://themes.gohugo.io/">サイトのテーマ</a>は<a href="https://github.com/Track3/hermit">hermit</a>を選択しました。
シンプルながら色合いもシックで落ち着いていて、非常に気に入っています。</p>
<p>手順通りにこのテーマのリポジトリを<a href="https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB">サブモジュール化</a>します。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ git submodule add https://github.com/Track3/hermit.git themes/hermit
</code></pre></div><p>その後、<code>config.toml</code> でWebサイトの設定をしていきます。
設定にあたっては、各テーマのリポジトリに含まれるものを参考にしました。
Google Analyticsを使ったアクセス解析などもこちらで設定できます。</p>
<h2 id="ページの作成">ページの作成</h2>
<p>以下のコマンドで新規のブログ記事を作成します。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ hugo new posts/first_post.md
</code></pre></div><p>テンプレートファイルである<code>archetypes/default.md</code> を元に <code>content/posts/first_post.md</code> が生成されます。</p>
<p>サーバーの立ち上げには以下のコマンドを入力します。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ hugo server -D
</code></pre></div><p><code>-D</code> オプションを付けることで、<code>draft: true</code> （本番環境では表示しない）設定のページの含めてビルドしてくれます。
<code>localhost:1313</code> でブラウザからページが確認できます。ホットリロードであるためファイル変更後に保存すると、自動的に変更を検知してビルド・リロードすることでブラウザ上に変更が反映されます。便利ですね…</p>
<p>最後に <code>hugo</code> コマンドでサイトを生成し、デプロイまで進めましょう。
変更をリモートリポジトリにプッシュすることでGitHub Actionsのジョブが走ります。以上で完了です。</p>
<h2 id="最後に">最後に</h2>
<p>はてなブログやQiitaのようなサービスと比べると、テーマ選定等も含めて初期設定に少し時間はかかりますが、ポートフォリオサイトとしても使えるのでオススメです。</p>
<p>GitHub Actionsを使えばデプロイも自動化できますし、やはりなによりもGitHub上で完結しているのはとても楽だと感じました。</p>
<p>全て無料で触ることができますので、是非お試しください。</p>
]]></content>
		</item>
		
	</channel>
</rss>
